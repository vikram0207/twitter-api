<?php
/**
 * Twitter - API
 * 
 * 
 * @category Playtime
 * @package  Twitter-API
 * @link https://github.com/vikram0207/twitter-api
 * @author   Vikram Singh <vikram0207@gmail.com>
 */
class TwitterApi extends Curl
{
    private $oauth_access_token;
    private $oauth_access_token_secret;
    private $consumer_key;
    private $consumer_secret;
    protected $oauth;
    public $url;

    /**
     * Create the API access object. Requires an URL and setting (Optional)
     * 
     * @param string $url
     * @param array $settings
     */
    public function __construct($url, $setting = array()) {
        $this->url = $url;
        if (!empty($settings['oauth_access_token']) && !empty($settings['oauth_access_token_secret']) && !empty($settings['consumer_key']) && !empty($settings['consumer_secret'])) {
            $this->oauth_access_token = $settings['oauth_access_token'];
            $this->oauth_access_token_secret = $settings['oauth_access_token_secret'];
            $this->consumer_key = $settings['consumer_key'];
            $this->consumer_secret = $settings['consumer_secret'];

        } else {
            $this->oauth_access_token = Config::ACCESS_TOKEN;
            $this->oauth_access_token_secret = Config::ACCESS_TOKEN_SECRET;
            $this->consumer_key = Config::CONSUMER_KEY;
            $this->consumer_secret = Config::CONSUMER_SECRET;
        }
        parent::__construct();
    }

    /**
     * Build the Oauth object using params set in construct and additionals
     * passed to this method.  see: https://dev.twitter.com/docs/api/1.1
     * 
     * @param string $url The API url to use. Example: https://api.twitter.com/1.1/search/tweets.json
     * @param string $requestMethod Either POST or GET
     * @return TwitterAPIExchange Instance of self for method chaining
     */
    public function buildOauth($url, $requestMethod)
    {
        if (!in_array(strtolower($requestMethod), array('post', 'get')))
        {
            throw new Exception('Request method must be either POST or GET');
        }
        
        $consumer_key = $this->consumer_key;
        $consumer_secret = $this->consumer_secret;
        $oauth_access_token = $this->oauth_access_token;
        $oauth_access_token_secret = $this->oauth_access_token_secret;
        
        $oauth = array( 
            'oauth_consumer_key' => $consumer_key,
            'oauth_nonce' => time(),
            'oauth_signature_method' => 'HMAC-SHA1',
            'oauth_token' => $oauth_access_token,
            'oauth_timestamp' => time(),
            'oauth_version' => '1.0'
        );
        
        $getfield = $this->getGetfield();
        
        if (!is_null($getfield))
        {
            $getfields = str_replace('?', '', explode('&', $getfield));
            foreach ($getfields as $g)
            {
                $split = explode('=', $g);
                $oauth[$split[0]] = $split[1];
            }
        }
        
        $base_info = $this->buildBaseString($url, $requestMethod, $oauth);
        $composite_key = rawurlencode($consumer_secret) . '&' . rawurlencode($oauth_access_token_secret);
        $oauth_signature = base64_encode(hash_hmac('sha1', $base_info, $composite_key, true));
        $oauth['oauth_signature'] = $oauth_signature;
        
        $this->url = $url;
        $this->oauth = $oauth;
        return $this;
    }
    
    /**
     * Perform the actual data retrieval from the API
     * 
     * @param boolean $return If true, returns data.
     * 
     * @return TwitterAPI Instance of self for method chaining
     */
    public function request($return = true)
    {
        if (!is_bool($return)) 
        { 
            throw new Exception('performRequest parameter must be true or false'); 
        }
        
        $header = array($this->buildAuthHeader($this->oauth), 'Expect:');
        $this->setHeader($header);
        $this->setURL($this->url);
        $this->initiate();
        return $this;
    }
    
    /**
     * Private method to generate the base string used by cURL
     * 
     * @param string $baseURI
     * @param string $method
     * @param array $params
     * 
     * @return string Built base string
     */
    private function buildBaseString($baseURI, $method, $params) 
    {
        $return = array();
        ksort($params);
        
        foreach($params as $key=>$value)
        {
            $return[] = "$key=" . $value;
        }
        
        return $method . "&" . rawurlencode($baseURI) . '&' . rawurlencode(implode('&', $return)); 
    }
    
    /**
     * Private method to generate authorization header used by cURL
     * 
     * @param array $oauth Array of oauth data generated by buildOauth()
     * 
     * @return string $return Header used by cURL for request
     */    
    private function buildAuthHeader($oauth) 
    {
        $return = 'Authorization: OAuth ';
        $values = array();
        
        foreach($oauth as $key => $value)
        {
            $values[] = "$key=\"" . rawurlencode($value) . "\"";
        }
        
        $return .= implode(', ', $values);
        return $return;
    }
    
    /**
     * Returns only retweet data
     * 
     * @param integer $count No of Retweet.
     * 
     * @return array return $response array.
     */    
    public function getOnlyRetweet($count=1) {
        $response = $this->getResponse();
        if(empty($response)) {
            return false;
        }
        $responseNew = array();
        foreach ($response->statuses as $value) {
            if($value->retweet_count >= $count) {
                $responseNew[] = $value;
            }
        }
        return $responseNew;
    }
    
    public function response(){
        return $this->getResponse();
    }

}